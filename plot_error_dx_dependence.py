import numpy as np
import os
import matplotlib.pyplot as plt
import math
np.set_printoptions(threshold=np.inf)

L = 3.2
test_data_name = "4_pin_old"

if(test_data_name == "4_pin_old"):
    # 4-pin, L_x=L_y=3.2, Diffusion, XS-1group
    ref_n = 1000
    n_vals = [40,41,42,43,44,45,46,47,48,49,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,490,510,530,550,600]
    l_inf_string = '''0.06713525 0.25344962 0.11273303 0.24464206 0.07376709 0.22181675
    0.11075692 0.22776358 0.063395   0.19374678 0.02849012 0.14081175
    0.06438215 0.05208474 0.04978187 0.10164784 0.04731218 0.07858747
    0.0723518  0.0434568  0.09930511 0.0234637  0.0762449  0.05187209
    0.05137956 0.03713025 0.03618985 0.07297234 0.02809386 0.05056961
    0.03783505 0.02707769 0.02649389 0.02265222 0.00823202 0.050242
    0.04937007 0.02637895 0.04430477 0.01361752 0.02061778 0.02708254
    0.03564369 0.01054724 0.01367779 0.01397501 0.03059244 0.03111377
    0.02214484 0.03419784 0.01366478 0.03893293 0.01392084 0.02568088
    0.01538876 0.01482877 0.01832698 0.01767721 0.03070061 0.00869176
    0.01755328 0.05143485 0.0058888  0.04770366 0.01493112 0.03902755
    0.02346255 0.03626556 0.00326318 0.03156099 0.01545216 0.03444788
    0.0222131  0.03329253 0.00357067 0.02958226 0.01294402 0.02654428
    0.00470065 0.02343538 0.00504564 0.00594187 0.0113966  0.01890115
    0.00885768 0.01118965 0.00971817 0.0026437  0.00817007 0.00257775
    0.00590103 0.01243418 0.00352396 0.00723334 0.00213987 0.0032637
    0.00512706 0.00563232 0.00242345 0.01245508 0.00162739 0.00455084
    0.00225489 0.00416118 0.004823   0.0013415  0.00177315 0.01312385'''
    l_2_string = '''0.04018121 0.07642446 0.06783813 0.07472269 0.05686242 0.06169998
    0.07892434 0.07074288 0.03708597 0.05008348 0.01137776 0.10131702
    0.04484191 0.02204362 0.03670574 0.07387347 0.0307777  0.05597839
    0.04326296 0.02704349 0.06876938 0.01259287 0.05254265 0.03850987
    0.0324972  0.02944184 0.01963868 0.0472072  0.01766156 0.03021913
    0.02512127 0.01139971 0.01827645 0.00991469 0.001748   0.03538149
    0.03007425 0.01418474 0.02814556 0.00547391 0.00754553 0.01930667
    0.02154937 0.00492038 0.00355699 0.00204906 0.02000051 0.01461467
    0.01378034 0.0202757  0.00599608 0.02531726 0.00710758 0.01440976
    0.0091239  0.00633511 0.01294237 0.01187307 0.01746495 0.00365706
    0.00678809 0.01462524 0.00203745 0.01370715 0.00746313 0.00907894
    0.01368332 0.008064   0.00059493 0.0064434  0.00574562 0.00877314
    0.01543661 0.00919694 0.00150852 0.00693438 0.0085938  0.00556382
    0.00188407 0.00400648 0.00308943 0.0025553  0.00603606 0.00387559
    0.00586497 0.00652425 0.00656835 0.00040044 0.00448661 0.00090902
    0.00275554 0.00093118 0.00117001 0.00375336 0.00066756 0.00157226
    0.00212407 0.00376556 0.00052752 0.0012235  0.00025892 0.00205958
    0.00105426 0.00181544 0.00286945 0.00048321 0.00077863 0.0015022'''

if(test_data_name == "homo_0_BC"):
    # homogeneous, L_x=L_y=3.2, Diffusion, XS-1group, zero boundary conditions
    ref_n = 800
    n_vals = [40,41,42,43,44,45,46,47,48,49,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250,260,270,280,290,300,310,320,330,340,350,370,400]
    l_inf_string = '''5.35080856e-03 5.09893578e-03 4.85796850e-03 4.64920376e-03
    4.45153635e-03 4.26198554e-03 4.08002455e-03 3.90532214e-03
    3.75569211e-03 3.61289439e-03 3.47538371e-03 3.21517906e-03
    2.98332050e-03 2.78683802e-03 2.60307804e-03 2.43088127e-03
    2.27456955e-03 2.14495837e-03 2.02278522e-03 1.90742031e-03
    1.79833666e-03 1.69504043e-03 1.60768770e-03 1.53059367e-03
    1.45729106e-03 1.38749273e-03 1.32095397e-03 1.25745696e-03
    1.19682357e-03 1.13883158e-03 1.08958361e-03 1.04728749e-03
    1.00670587e-03 1.68991699e-02 9.30366527e-04 8.94405937e-04
    8.59807746e-04 8.26498209e-04 7.94410139e-04 7.63477661e-04
    7.33639005e-04 7.04837532e-04 6.76991969e-04 6.55978892e-04
    6.36587462e-04 6.17822384e-04 5.99652518e-04 5.82052699e-04
    5.64994939e-04 5.48457608e-04 5.32416967e-04 5.16849435e-04
    5.01734604e-04 4.87053207e-04 4.72787048e-04 4.58921382e-04
    4.45436249e-04 4.32318702e-04 4.19550687e-04 4.07124423e-04
    3.95022703e-04 3.66107054e-04 1.68815683e-02 3.22044328e-04
    3.06093502e-04 2.91035119e-04 2.76795687e-04 2.63311229e-04
    2.50523017e-04 2.38379926e-04 2.26833632e-04 2.15841748e-04
    2.05365275e-04 1.95369559e-04 1.85821818e-04 1.76692972e-04
    1.67956110e-04 1.60283845e-04 1.54396832e-04 1.47680632e-04
    1.40247877e-04 1.23993768e-04 1.11712088e-04 1.10754683e-04
    1.05351008e-04 9.95401976e-05 9.23676621e-05 8.55289387e-05
    8.12390983e-05 7.71935048e-05 7.33765481e-05 6.63553212e-05
    5.71293450e-05'''
    l_2_string = '''3.05748189e-03 2.90849737e-03 2.77009203e-03 2.64499966e-03
    2.52700857e-03 2.41644287e-03 2.31281623e-03 2.21264678e-03
    2.12523517e-03 2.03909819e-03 1.96219545e-03 1.81166948e-03
    1.68025223e-03 1.56290070e-03 1.45717579e-03 1.36217916e-03
    1.27525346e-03 1.19805316e-03 1.12609730e-03 1.06081945e-03
    1.00114468e-03 9.46110395e-04 8.95823919e-04 8.49514661e-04
    8.06506738e-04 7.69848625e-04 7.29775808e-04 6.95480832e-04
    6.63379487e-04 6.33363744e-04 6.05597798e-04 5.79646862e-04
    5.55568620e-04 3.15082391e-03 5.10868160e-04 4.93789348e-04
    4.71516945e-04 4.53490974e-04 4.36525695e-04 4.20447254e-04
    4.05304232e-04 3.90921402e-04 3.75516169e-04 3.64276534e-04
    3.52060990e-04 3.40777772e-04 3.29325686e-04 3.18786196e-04
    3.08670885e-04 2.99308379e-04 2.89989459e-04 2.81377168e-04
    2.73407697e-04 2.64898547e-04 2.57139495e-04 2.49936407e-04
    2.42854654e-04 2.36175090e-04 2.29744264e-04 2.23459972e-04
    2.17884641e-04 2.03650835e-04 4.46123469e-03 1.79585367e-04
    1.69143990e-04 1.59618035e-04 1.50799174e-04 1.42614206e-04
    1.35208080e-04 1.28336733e-04 1.25159338e-04 1.16023541e-04
    1.10490072e-04 1.05359331e-04 1.00595252e-04 9.61479745e-05
    9.19608399e-05 8.79981612e-05 8.46836943e-05 8.08924552e-05
    7.77646240e-05 7.16912568e-05 6.62923699e-05 6.17475135e-05
    5.74540648e-05 5.39490025e-05 5.01555166e-05 4.77590609e-05
    4.41464325e-05 4.15389952e-05 3.91998778e-05 3.49371385e-05
    3.29628922e-05'''

if(test_data_name == "4_pin_0_BC"):
    # 4_pin, L_x=L_y=3.2, Diffusion, XS-1group, zero boundary conditions
    ref_n = 800
    n_vals = [40,41,42,43,44,45,46,47,48,49,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250,260,270,280,290,300,310,320,330,340,350,370,400]
    l_2_string = '''0.01541387 0.05915502 0.02632208 0.0578709  0.02126465 0.04677411
    0.02939405 0.05334145 0.01444536 0.04504353 0.00598466 0.03745173
    0.01673012 0.00962695 0.01374735 0.02732218 0.01178804 0.02080392
    0.01631897 0.01015114 0.02555141 0.00493319 0.01950868 0.01461504
    0.01216363 0.01092199 0.00791267 0.01763202 0.00661594 0.0113583
    0.0093821  0.00452523 0.00679061 0.00503905 0.00094416 0.01311458
    0.01122456 0.00538425 0.01046781 0.00218703 0.00311402 0.00713582
    0.00804371 0.0018591  0.00180312 0.00093848 0.0074055  0.00570175
    0.00509787 0.00755542 0.00245624 0.00940776 0.00281616 0.00539218
    0.00336759 0.00240179 0.00475941 0.00459194 0.00653249 0.00140347
    0.00266528 0.0092074  0.0034729  0.00898236 0.0027715  0.00642047
    0.00508468 0.00625102 0.00027144 0.0045923  0.00175523 0.00705832
    0.00567882 0.00626307 0.000663   0.00566965 0.0031398  0.00429284
    0.00085963 0.00372134 0.00111796 0.00112309 0.00220675 0.00153444
    0.00211045 0.00236965 0.0023725  0.00016139 0.00160185 0.00031893
    0.00096093 0.00038573 0.00052006'''
    l_inf_string = '''0.04119032 0.20504387 0.07647072 0.19670097 0.0508843  0.17756819
    0.07049165 0.18205705 0.04830099 0.16444996 0.02399918 0.09056963
    0.04091252 0.03813468 0.03145462 0.06413188 0.03529751 0.04979391
    0.04853721 0.02847091 0.06380505 0.01581149 0.04888379 0.0364282
    0.03365222 0.02482468 0.02786711 0.0477773  0.01822052 0.03364081
    0.02429861 0.01927849 0.01667284 0.02373033 0.00703853 0.03174688
    0.03264762 0.0178453  0.02888065 0.00963915 0.0149947  0.01689089
    0.02347467 0.0071758  0.01060685 0.00692499 0.01966666 0.02176668
    0.01435435 0.02261171 0.01053002 0.02517067 0.01045334 0.01716663
    0.00997619 0.01039469 0.01129128 0.0128127  0.02052158 0.00598403
    0.01261917 0.03976496 0.0140107  0.03738019 0.01007163 0.03100617
    0.01550338 0.02954418 0.00237208 0.02523299 0.00673949 0.02839615
    0.01380055 0.0262307  0.00264777 0.02443594 0.0080914  0.02158499
    0.00349948 0.02013876 0.00389719 0.00446721 0.00759462 0.00531051
    0.00547564 0.00727197 0.00595219 0.00191926 0.00533425 0.00216392
    0.00392472 0.00238172 0.00201331'''

n_vals = np.array(n_vals)
l_2 = [float(x) for x in l_2_string.split()]
l_inf = [float(x) for x in l_inf_string.split()]
print("n vals: ", n_vals)
print("l_inf: ", l_inf)
print("l_2: ", l_2)
plt.plot(n_vals, l_inf)
plt.xlabel("n_x")
plt.ylabel("L_inf error")
plt.figure()

plt.plot(L/n_vals, l_inf)
plt.xlabel(r'$\Delta x$')
plt.ylabel("L_inf error")
linf_coefs = [(L/n_vals[i])**2 / l_inf[i] for i in range(len(n_vals))]
linf_coef = np.average(linf_coefs)
plt.plot(L/n_vals,(L/n_vals)**2 / linf_coef)
plt.figure()

plt.plot(n_vals, l_2)
plt.xlabel("n_x")
plt.ylabel("L_2 error")
plt.figure()

plt.plot(L/n_vals, l_2)
plt.xlabel(r'$\Delta x$')
plt.ylabel("L_2 error")

n50 = np.where(np.array(n_vals) == 50)[0][0]
print("L2 error with n=50, dx = " + str(L/50) + ': ' + str(l_2[n50]))

n100 = np.where(np.array(n_vals) == 100)[0][0]
print("L2 error with n=100, dx = " + str(L/100) + ': ' + str(l_2[n100]))

n200 = np.where(np.array(n_vals) == 200)[0][0]
print("L2 error with n=200, dx = " + str(L/200) + ': ' + str(l_2[n200]))

n400 = np.where(np.array(n_vals) == 400)[0][0]
print("L2 error with n=400, dx = " + str(L/400) + ': ' + str(l_2[n400]))

print("ratios: ", l_2[n200] / l_2[n400], "   ", l_2[n100] / l_2[n200], "   ", l_2[n50] / l_2[n100], "   ",)

l2_coefs = [(L/n_vals[i])**2 / l_2[i] for i in range(len(n_vals))]
l2_coef = np.average(l2_coefs)
plt.plot(L/n_vals,(L/n_vals)**2 / l2_coef)

plt.show()